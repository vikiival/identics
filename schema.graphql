type Identity @entity {
  "Account address"
  id: ID!
  name: String @index
  legal: String
  web: String
  matrix: String
  email: String
  image: String
  twitter: String @index
  github: String
  discord: String
  usernames: [Username!] @derivedFrom(field: "identity")
  events: [Event!] @derivedFrom(field: "identity")
}

type Username @entity {
  id: ID!
  primary: Boolean!
  name: String! @index
  identity: Identity!
}

# Abstract entity to represent an event
# https://graphql.org/learn/schema/#interfaces
interface EventType {
  id: ID!
  blockNumber: BigInt
  timestamp: DateTime!
  caller: String!
  currentOwner: String
  interaction: Interaction!
  # version: Int!
  meta: String!
}

# Entity to represent an event defined by Interaction
type Event implements EventType @entity {
  id: ID!
  blockNumber: BigInt
  timestamp: DateTime!
  caller: String!
  currentOwner: String! # currentOwner
  interaction: Interaction!
  meta: String!
  identity: Identity!
  # version: Int!
}

# Possible on-chain interactions that we listen for
enum Interaction {
  CREATE
  DESTROY
  CHANGE
}


# type Account @entity {
#   "Account address"
#   id: ID!
#   transfersTo: [Transfer!] @derivedFrom(field: "to")
#   transfersFrom: [Transfer!] @derivedFrom(field: "from")
# }

# type Transfer @entity {
#   id: ID!
#   blockNumber: Int! @index
#   timestamp: DateTime! @index
#   extrinsicHash: String @index
#   from: Account!
#   to: Account!
#   amount: BigInt! @index
#   fee: BigInt! # fee is calculated at the best effort and may be zero for some old extrinsics
# }

# Entity to represent when the cache was last updated
# type CacheStatus @entity {
#   id: ID!
#   lastBlockTimestamp: DateTime!
# }